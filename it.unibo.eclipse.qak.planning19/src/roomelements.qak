System roomelements
 
mqttBroker "localhost" : 1883


Dispatch showState	: showState()


Event modelcontent: modelcontent(CONTENT)

//Dispatch prepare		:	prepare(ARG)
Dispatch isAvailable	:	isAvailable(ARG)
Dispatch clear			:	clear(ARG)
Dispatch add			:	add(ARG)
Dispatch get			:	get(ARG)
Dispatch put			:	put(ARG)
Dispatch remove			:	remove(ARG)
Dispatch yes			:	yes()
Dispatch no				: 	no()

Context ctxRoomElements    	ip [host="localhost" port=8037]   -mqtt 
Context ctxDummyWorkInRoom 	ip [host="workinroomhost" port=8038]   -mqtt

ExternalQActor butlermind context ctxDummyWorkInRoom

QActor dishwasher context ctxRoomElements{
	/*
	 * dishawasher:
	 * ->put, <-remove
	 */
	 
	State s0 initial{
		println("&&& dishwasher STARTED")
		// preparazione futura gestione dishwasher
		solve(consult("dishwasherSupport.pl"))
	}
	Goto waitCmd	
	
	State waitCmd{
		println("&&& dishwasher waiting for command")
	}
	Transition t0	whenMsg showState -> showStateTask
					whenMsg	put -> putTask		//da fare	per aggiungere piatti sporchi

	State showStateTask{
		printCurrentMessage
		solve(getDishwasherState(L))
		ifSolved{
			/* 
			 * Porre il parsing in un metodo utility, tanto e' lo stesso per tutti
			 * Parsing in questo modo perche' il resto e' lato frontend
			 */
			["
				val DishwasherState = itunibo.prolog.prologUtils.parseTablewareState(myself, \"L\")
			"]
			emit  modelcontent: modelcontent(content( dishwasher( state( $DishwasherState ) ) ))
   		}else{
   			println("getTableware dishwasher FAIL")
   		}
	}
	Goto waitCmd

	State putTask{
		onMsg(put: put(ARG)){
			printCurrentMessage
			[" val List = payloadArg(0) "]
			solve(addTablewareList("$List"))
			ifSolved {
				forward butlermind -m remove : remove($List)
			} else {
				println("dishwasherPut FAIL")
			}
		}
		
	}Goto showStateTask
}

QActor pantry context ctxRoomElements{
	/*
	 * pantry:
	 * ->get, <-put
	 */
	 
	State s0 initial{
		println("&&& pantry STARTED")
		solve(consult("pantryInit.pl")) //da controllare perchÃ¨ non va con quel file
	}
	Goto waitCmd		
	
	State waitCmd{
		println("&&& pantry waiting for command")
	}
	Transition t0	whenMsg showState -> showStateTask
					whenMsg get -> getTask
					whenMsg put -> putTask	// per riaggiungere piatti puliti?
					
	State showStateTask{
		printCurrentMessage
		solve(getPantryState(L))
		ifSolved{
			/* 
			 * Porre il parsing in un metodo utility, tanto e' lo stesso per tutti
			 * Parsing in questo modo perche' il resto e' lato frontend
			 */
			["
				val PantryState = itunibo.prolog.prologUtils.parseTablewareState(myself, \"L\")
			"]
			emit  modelcontent: modelcontent(content( pantry( state( $PantryState ) ) ))
 		}else{
   			println("getPantryState FAIL")
   		}
	}
	Goto waitCmd
	
	State getTask{
		onMsg(get: get(ARG)){
			printCurrentMessage
			["val Tableware = payloadArg(0)"]
			solve(removeTablewareList($Tableware))
			ifSolved {
				forward butlermind -m put : put($Tableware)
			} else {
				println("pantryGet FAIL")
			}	
		}
	}
	Goto showStateTask
	
	State putTask{
		onMsg(get: get(ARG)){
			printCurrentMessage
			["val Tableware = payloadArg(0)"]
			solve(addTablewareList($Tableware))
			ifSolved {
				forward butlermind -m remove : remove($Tableware)
			} else {
				println("pantryPut FAIL")
			}	
		}
	}
	Goto showStateTask
	
}



QActor table context ctxRoomElements{
	/*
	 * table:
	 * ->put, <-remove
	 * ->clear, <-put
	 */
	 
	State s0 initial{
		println("&&& table STARTED")
		solve(consult("tableSupport.pl")) 
	}
	Goto waitCmd	
	
	State waitCmd{
		println("&&& table waiting for command")
	}
	Transition t0	 whenMsg put -> putTask
				 	 whenMsg clear -> clearTask
				 	 whenMsg showState -> showStateTask
					//whenMsg add -> AddTask	per riaggiungere piatti puliti?
	
	State putTask{
		onMsg(put: put(ARG)){
			printCurrentMessage
			 [" val List = payloadArg(0) "]
			 //solve della lista di roba da mettere sulla tavola : come gestire la lista?
			 solve(addGenericList($List))
			 ifSolved {
				forward butlermind -m remove : remove($List)
			 } else {
				println("putTableTask FAIL")
				//invio messaggi al robot per gestione fallimenti?
			 }		 
		 }
	}Goto showStateTask
	
	State clearTask{		//da rivedere
		printCurrentMessage
		 solve(clear(L))
		 ifSolved {
			["
			val List = getCurSol(\"L\").toString()
			"]
			forward butlermind -m put : put($List)
		 } else {
			println("clearTable FAIL")
		 }
	}Goto showStateTask
	
	State showStateTask{
		printCurrentMessage
		solve(getFoodTableState(F))
			ifSolved{
			["		
				val FoodState = itunibo.prolog.prologUtils.parseFoodState(myself, \"F\")
			"]
  			emit  modelcontent: modelcontent(content(tableFood(state($FoodState) ) ))
  			}else{
   				println("getFoodTableState FAIL")
   			}
  		solve(getTablewareTableState(T))
			ifSolved{
			["
				val TablewareState = itunibo.prolog.prologUtils.parseTablewareState(myself, \"T\")
			"]
  			emit  modelcontent: modelcontent(content(tableTableware(state( $TablewareState) ) ))
   		}else{
   			println("getTablewareTableState FAIL")
   		}
	}Goto waitCmd
	
}

QActor fridge context ctxRoomElements{
	/*
	 *fridge:
	 * ->get, <-put
	 * ->isAvailable, <-yes/<-no
	 * ->put, <-remove
	 */

	State s0 initial{
		solve(consult("fridgeInit.pl"))
		println("&&&  fridge STARTED")
	}
	Goto waitCmd
	
	State waitCmd{
		println("&&&  fridge waiting for command")
	}
	
	Transition t0	 whenMsg put -> putTask
				 	 whenMsg showState -> showStateTask
				 	 whenMsg get -> getTask
				 	 whenMsg isAvailable -> checkTask

	
	
	State showStateTask{
		printCurrentMessage
		//solve(showFridgeState)
		solve(getFridgeState(L))
		ifSolved{
			["
				val FridgeState = itunibo.prolog.prologUtils.parseFoodState(myself,\"L\")
			"]
  			emit  modelcontent: modelcontent(content( fridge( state( $FridgeState) ) ))
   		}else{
   			println("getFridgeState FAIL")
   		}
	}Goto waitCmd
	
	State getTask{
		printCurrentMessage
		onMsg(get: get(ARG)){
			[" 
				val Food = payloadArg(0)
			"]
			
			solve(removeFoodList($Food))
			ifSolved {
				println("Food = $Food")
				forward butlermind -m put : put($Food)	
			} else {
				println("fridgeGet FAIL")
			}
		}
	}
	Goto showStateTask
	
	State putTask{
		onMsg(put: put(ARG)){
			printCurrentMessage
			[" val Food = payloadArg(0) "]
			solve(addFoodList("$Food"))
			ifSolved {
				forward butlermind -m remove : remove($Food)
			} else {
				println("fridgePut FAIL")
			}		
		}
	}Goto showStateTask
	
	State checkTask{
		onMsg(isAvailable: isAvailable(ARG)){
			printCurrentMessage
			[" val foodCode = payloadArg(0) "]
			solve(isThereFoodByCode("$foodCode"))
			ifSolved {
				forward butlermind -m yes : yes()
			} else {
				forward butlermind -m no : no()
			}	
		}
	}Goto waitCmd
}



QActor proxyfridge context ctxRoomElements{
	/*
	 *fridge:
	 * ->get, <-put
	 * ->isAvailable, <-yes/<-no
	 * ->put, <-remove
	 */
	["val actor=this"]
	State s0 initial{
		solve(consult("fridgeInit.pl"))
		["itunibo.coap.client.CoapClientControl.create(actor,\"fridge\")"]
		println("&&&  fridge STARTED")
	}
	Goto waitCmd
	
	State waitCmd{
		println("&&&  fridge waiting for command")
	}
	
	Transition t0	 whenMsg put -> putTask
				 	 whenMsg showState -> showStateTask
				 	 whenMsg get -> getTask
				 	 whenMsg isAvailable -> checkTask

	
	
	State showStateTask{
		printCurrentMessage
		//solve(showFridgeState)
		["itunibo.coap.client.CoapClientControl.send(\"showState()\")"]
	}Goto waitCmd
	
	State getTask{
		printCurrentMessage
		onMsg(get: get(ARG)){
			[" 
				val Food = payloadArg(0)
			"]
			
			["itunibo.coap.client.CoapClientControl.send(\"get($Food)\")"]
		}
	}
	Goto waitCmd
	
	State putTask{
		onMsg(put: put(ARG)){
			printCurrentMessage
			[" val Food = payloadArg(0) "]
			["itunibo.coap.client.CoapClientControl.send(\"put($Food)\")"]
		}
	}Goto waitCmd
	
	State checkTask{
		onMsg(isAvailable: isAvailable(ARG)){
			printCurrentMessage
			[" val foodCode = payloadArg(0) "]
			["itunibo.coap.client.CoapClientControl.send(\"isAvailable($foodCode)\")"]
			
		}
	}Goto waitCmd
}



