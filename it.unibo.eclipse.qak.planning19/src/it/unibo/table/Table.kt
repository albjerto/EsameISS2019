/* Generated by AN DISI Unibo */ 
package it.unibo.table

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Table ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("&&& table STARTED")
						solve("consult('tableSupport.pl')","") //set resVar	
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("waitCmd") { //this:State
					action { //it:State
						println("&&& table waiting for command")
					}
					 transition(edgeName="t05",targetState="putTask",cond=whenDispatch("put"))
					transition(edgeName="t06",targetState="clearTask",cond=whenDispatch("clear"))
					transition(edgeName="t07",targetState="showStateTask",cond=whenDispatch("showState"))
				}	 
				state("putTask") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("put(ARG)"), Term.createTerm("put(ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("$name in ${currentState.stateName} | $currentMsg")
								 val List = payloadArg(0) 
								solve("addGenericList($List)","") //set resVar	
								if(currentSolution.isSuccess()) { forward("remove", "remove($List)" ,"butlermind" ) 
								 }
								else
								{ println("putTableTask FAIL")
								 }
						}
					}
					 transition( edgeName="goto",targetState="showStateTask", cond=doswitch() )
				}	 
				state("clearTask") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						solve("clear(L)","") //set resVar	
						if(currentSolution.isSuccess()) { 
									val List = getCurSol("L").toString()
						forward("put", "put($List)" ,"butlermind" ) 
						 }
						else
						{ println("clearTable FAIL")
						 }
					}
					 transition( edgeName="goto",targetState="showStateTask", cond=doswitch() )
				}	 
				state("showStateTask") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						solve("getFoodTableState(F)","") //set resVar	
						if(currentSolution.isSuccess()) { 		
										val FoodState = itunibo.prolog.prologUtils.parseFoodState(myself, "F")
						emit("modelcontent", "modelcontent(content(tableFood(state($FoodState))))" ) 
						 }
						else
						{ println("getFoodTableState FAIL")
						 }
						solve("getTablewareTableState(T)","") //set resVar	
						if(currentSolution.isSuccess()) { 
										val TablewareState = itunibo.prolog.prologUtils.parseTablewareState(myself, "T")
						emit("modelcontent", "modelcontent(content(tableTableware(state($TablewareState))))" ) 
						 }
						else
						{ println("getTablewareTableState FAIL")
						 }
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
			}
		}
}
