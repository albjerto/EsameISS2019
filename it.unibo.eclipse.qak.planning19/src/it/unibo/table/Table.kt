/* Generated by AN DISI Unibo */ 
package it.unibo.table

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Table ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("&&& table STARTED")
						solve("consult('tableSupport.pl')","") //set resVar	
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("waitCmd") { //this:State
					action { //it:State
						println("&&& pantry waiting for command")
					}
					 transition(edgeName="t04",targetState="putTask",cond=whenDispatch("put"))
					transition(edgeName="t05",targetState="clearTask",cond=whenDispatch("clear"))
					transition(edgeName="t06",targetState="showStateTask",cond=whenDispatch("showState"))
				}	 
				state("putTask") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("put(ARG)"), Term.createTerm("put(ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("$name in ${currentState.stateName} | $currentMsg")
								 val list = payloadArg(0) 
								solve("put('$list')","") //set resVar	
								if(currentSolution.isSuccess()) {  replyToCaller("remove", "remove($list)") 
								 }
								else
								{ println("putTableTask FAIL")
								 }
						}
					}
					 transition( edgeName="goto",targetState="showStateTask", cond=doswitch() )
				}	 
				state("clearTask") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						solve("clear(L)","") //set resVar	
						if(currentSolution.isSuccess()) { 
									val list = getCurSol("L").toString()
									replyToCaller("put", "put($list)")
						 }
						else
						{ println("clearTable FAIL")
						 }
					}
					 transition( edgeName="goto",targetState="showStateTask", cond=doswitch() )
				}	 
				state("showStateTask") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						solve("showFoodState(F)","") //set resVar	
						if(currentSolution.isSuccess()) { 		
										val FoodState = getCurSol("F").toString()
						emit("modelcontent", "modelcontent(content(tableFood(state($FoodState))))" ) 
						 }
						else
						{ println("showFoodState FAIL")
						 }
						solve("showTableWareState(T)","") //set resVar	
						if(currentSolution.isSuccess()) { 
										val TableWareState = getCurSol("T").toString()
						emit("modelcontent", "modelcontent(content(tableTableware(state($TableWareState))))" ) 
						 }
						else
						{ println("getTableState FAIL")
						 }
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
			}
		}
}
