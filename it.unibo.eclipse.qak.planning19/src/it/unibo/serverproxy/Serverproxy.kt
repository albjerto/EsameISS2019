/* Generated by AN DISI Unibo */ 
package it.unibo.serverproxy

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Serverproxy ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val actor=this
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("&&&  fridgeProxy starting")
						itunibo.coap.server.CoapServerControl.create(actor,"fridge")
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("waitCmd") { //this:State
					action { //it:State
						println("&&&  fridgeProxy waiting for command")
					}
					 transition(edgeName="t00",targetState="prepareTask",cond=whenDispatch("prepare"))
					transition(edgeName="t01",targetState="addTask",cond=whenDispatch("add"))
					transition(edgeName="t02",targetState="showTask",cond=whenDispatch("showFridgeState"))
					transition(edgeName="t03",targetState="checkAvailability",cond=whenDispatch("isAvailable"))
					transition(edgeName="t04",targetState="respondCoap",cond=whenDispatch("modelUpdate"))
					transition(edgeName="t05",targetState="notifyCoap",cond=whenEvent("stateChanged"))
				}	 
				state("prepareTask") { //this:State
					action { //it:State
						forward("prepare", "prepare()" ,"fridge" ) 
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("addTask") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("add(ARG)"), Term.createTerm("add(C)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("add", "add(C)" ,"fridge" ) 
						}
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("showTask") { //this:State
					action { //it:State
						forward("showFridgeState", "showFridgeState()" ,"fridge" ) 
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("checkAvailability") { //this:State
					action { //it:State
						forward("isAvailable", "isAvailable()" ,"fridge" ) 
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("respondCoap") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("modelUpdate(TARGET,VALUE)"), Term.createTerm("modelUpdate(TARGET,VALUE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("&&&  serverproxy received model update")
								itunibo.coap.server.CoapServerControl.coapRespond(payloadArg(1))
						}
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("notifyCoap") { //this:State
					action { //it:State
						itunibo.coap.server.CoapServerControl.coapNotify()
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
			}
		}
}
