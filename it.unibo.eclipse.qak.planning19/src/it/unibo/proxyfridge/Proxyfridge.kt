/* Generated by AN DISI Unibo */ 
package it.unibo.proxyfridge

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Proxyfridge ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
			val actor=this
			val serverAddr="coap://localhost:5683"
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("&&&  proxyClientFridge STARTED")
						itunibo.coap.client.CoapClientControl.create(actor,serverAddr)
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("waitCmd") { //this:State
					action { //it:State
						println("&&&  fridge waiting for command")
					}
					 transition(edgeName="t029",targetState="prepareTask",cond=whenDispatch("prepare"))
					transition(edgeName="t030",targetState="addTask",cond=whenDispatch("add"))
					transition(edgeName="t031",targetState="clearTask",cond=whenDispatch("clear"))
					transition(edgeName="t032",targetState="showTask",cond=whenDispatch("showFridgeState"))
					transition(edgeName="t033",targetState="checkAvailability",cond=whenDispatch("isAvailable"))
				}	 
				state("prepareTask") { //this:State
					action { //it:State
						itunibo.coap.client.CoapClientControl.send("prepare")
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("addTask") { //this:State
					action { //it:State
						itunibo.coap.client.CoapClientControl.send("add")
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("clearTask") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("clear(ARG)"), Term.createTerm("clear(S)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								itunibo.coap.client.CoapClientControl.send("clear")
						}
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("showTask") { //this:State
					action { //it:State
						itunibo.coap.client.CoapClientControl.send("showFridgeState")
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("checkAvailability") { //this:State
					action { //it:State
						itunibo.coap.client.CoapClientControl.send("isAvailable")
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
			}
		}
}
