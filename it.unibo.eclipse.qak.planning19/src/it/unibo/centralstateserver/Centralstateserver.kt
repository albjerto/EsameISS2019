/* Generated by AN DISI Unibo */ 
package it.unibo.centralstateserver

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Centralstateserver ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("&&& centralStateServer starting")
						solve("consult('prepareFoodList.pl')","") //set resVar	
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("waitCmd") { //this:State
					action { //it:State
						println("&&& centralStateServer waiting for command")
					}
					 transition(edgeName="t019",targetState="showTableTask",cond=whenDispatch("showTableState"))
					transition(edgeName="t020",targetState="prepareTable",cond=whenDispatch("prepare"))
					transition(edgeName="t021",targetState="addTable",cond=whenDispatch("add"))
					transition(edgeName="t022",targetState="clearTable",cond=whenDispatch("clear"))
				}	 
				state("showTableTask") { //this:State
					action { //it:State
						println("&&& centralStateServer showTableState")
						solve("showTableState","") //set resVar	
					}
					 transition( edgeName="goto",targetState="randomConsumption", cond=doswitch() )
				}	 
				state("randomConsumption") { //this:State
					action { //it:State
						println("&&& centralStateServer randomly consuming")
						solve("randomConsume","") //set resVar	
						println("&&& centralStateServer randomConsumption executed, now table state as follows")
						solve("showTableState","") //set resVar	
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("prepareTable") { //this:State
					action { //it:State
						println("&&& centralStateServer prepareTable, now table state as follows")
						solve("consult('fridgeInit.pl')","") //set resVar	
						solve("showTableState","") //set resVar	
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("addTable") { //this:State
					action { //it:State
						println("&&& centralStateServer updating tableState after add")
						var code = "" 
						if( checkMsgContent( Term.createTerm("add(ARG)"), Term.createTerm("add(CODE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								code = payloadArg(0)
								solve("addTable('$code',1)","") //set resVar	
						}
						println("&&& centralStateServer updated table, now table state as follows")
						solve("showTableState","") //set resVar	
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("clearTable") { //this:State
					action { //it:State
						println("&&& centralStateServer updating tableState after clear")
						solve("retractAll(foodTable(C,N))","") //set resVar	
						println("&&& centralStateServer updated table, now table state as follows")
						solve("showTableState","") //set resVar	
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
			}
		}
}
